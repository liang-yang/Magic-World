{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction "},"1 Operating System/":{"url":"1 Operating System/","title":"1 Operating System","keywords":"","body":"1 Operating System "},"2 Programming Language/":{"url":"2 Programming Language/","title":"2 Programming Language","keywords":"","body":"2 Programming Language "},"2 Programming Language/2.1 Java/":{"url":"2 Programming Language/2.1 Java/","title":"2.1 Java","keywords":"","body":"2.1 Java "},"2 Programming Language/2.2 Python/":{"url":"2 Programming Language/2.2 Python/","title":"2.2 Python","keywords":"","body":"2.2 Python "},"2 Programming Language/2.2 Python/2.2.1 statsmodels.html":{"url":"2 Programming Language/2.2 Python/2.2.1 statsmodels.html","title":"2.2.1 statsmodels","keywords":"","body":" statsmodels index R-style formulas endog, exog 1.3 Import Paths and Structure 2. Linear Regression statsmodels index R-style formulas Since version 0.5.0 of statsmodels, you can use R-style formulas together with pandas data frames to fit your models. #a simple example of R-style formulas import statsmodels.formula.api as smf smf.ols('Lottery ~ Literacy + np.log(Pop1831)', data=dat).fit() #a simple example of R-style formulas import statsmodels.formula.api as smf smf.ols('Lottery ~ Literacy + np.log(Pop1831)', data=dat).fit() 符号 逻辑意义 数学表达式 备注 Θ\\ThetaΘ f(n)f(n)f(n) 在数量级上严格等于 g(n)g(n)g(n) limn→∞f(n)g(n)=C ⇒ f(n)=Θ(g(n))\\lim \\limits_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = C \\space \\Rightarrow \\space f(n) = \\Theta(g(n))​n→∞​lim​​​g(n)​​f(n)​​=C ⇒ f(n)=Θ(g(n)) C∈R & C≠0C \\in R \\space \\& \\space C \\neq 0C∈R & C≠0 ooo f(n)f(n)f(n) 在数量级上严格小于 g(n)g(n)g(n) limn→∞f(n)g(n)=0 ⇒ f(n)=o(g(n))\\lim \\limits_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = 0 \\space \\Rightarrow \\space f(n) = o(g(n))​n→∞​lim​​​g(n)​​f(n)​​=0 ⇒ f(n)=o(g(n)) OOO f(n)f(n)f(n) 在数量级上小于等于 g(n)g(n)g(n) limn→∞f(n)g(n)=(0∪C) ⇒ f(n)=O(g(n))\\lim \\limits_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = (0 \\cup C) \\space \\Rightarrow \\space f(n) = O(g(n))​n→∞​lim​​​g(n)​​f(n)​​=(0∪C) ⇒ f(n)=O(g(n)) O=o ∪ ΘO=o \\space \\cup \\space \\ThetaO=o ∪ Θ ω\\omegaω f(n)f(n)f(n) 在数量级上严格大于 g(n)g(n)g(n) limn→∞f(n)g(n)=∞ ⇒ f(n)=ω(g(n))\\lim \\limits_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = \\infty \\space \\Rightarrow \\space f(n) = \\omega(g(n))​n→∞​lim​​​g(n)​​f(n)​​=∞ ⇒ f(n)=ω(g(n)) Ω\\OmegaΩ f(n)f(n)f(n) 在数量级上大于等于 g(n)g(n)g(n) limn→∞f(n)g(n)=(∞∪C) ⇒ f(n)=ω(g(n))\\lim \\limits_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = (\\infty \\cup C) \\space \\Rightarrow \\space f(n) = \\omega(g(n))​n→∞​lim​​​g(n)​​f(n)​​=(∞∪C) ⇒ f(n)=ω(g(n)) Ω=ω ∪ Θ\\Omega = \\omega \\space \\cup \\space \\ThetaΩ=ω ∪ Θ endog, exog endog ==Endogenous== variables designates variables in an economic/econometric model that are ++explained, or predicted++, by that model. see http://stats.oecd.org/glossary/detail.asp?ID=794 exog ==Exogenous== variables designates variables that appear in an economic/econometric model, but are ++not explained by that model++ (i.e. they are taken as given by the model). see http://stats.oecd.org/glossary/detail.asp?ID=890 1.3 Import Paths and Structure Two ways of importing functions and classes from statsmodels: API import for interactive use Importing statsmodels.api will load most of the public parts of statsmodels. This makes most functions and classes conveniently available within one or two levels, without making the “sm” namespace too crowded. import statsmodels.api as sm >>> dir(sm) ['GLM', 'GLS', 'GLSAR', 'Logit', 'MNLogit', 'OLS', 'Poisson', 'Probit', 'RLM', 'WLS', '__builtins__', '__doc__', '__file__', '__name__', '__package__', 'add_constant', 'categorical', 'datasets', 'distributions', 'families', 'graphics', 'iolib', 'nonparametric', 'qqplot', 'regression', 'robust', 'stats', 'test', 'tools', 'tsa', 'version'] Direct import for programs #import functions and classes from statsmodels.regression.linear_model import OLS, WLS from statsmodels.tools.tools import rank, add_constant #import modules from statsmodels.datasets import macrodata #import modules with aliases import statsmodels.regression.linear_model as lm import statsmodels.stats.diagnostic as smsdia import statsmodels.stats.outliers_influence as oi 2. Linear Regression "},"3 Database/":{"url":"3 Database/","title":"3 Database","keywords":"","body":"3 Database "},"3 Database/3.1 MySQL/":{"url":"3 Database/3.1 MySQL/","title":"3.1 MySQL","keywords":"","body":"3.1 MySQL "},"3 Database/3.2 OceanBase/":{"url":"3 Database/3.2 OceanBase/","title":"3.2 OceanBase","keywords":"","body":"3.2 OceanBase "},"4 Mathematic/":{"url":"4 Mathematic/","title":"4 Mathematic","keywords":"","body":"4 Mathematic "},"4 Mathematic/4.1 Math Analysis/":{"url":"4 Mathematic/4.1 Math Analysis/","title":"4.1 Math Analysis","keywords":"","body":"4.1 Math Analysis "},"4 Mathematic/4.2 Linear Algebra/":{"url":"4 Mathematic/4.2 Linear Algebra/","title":"4.2 Linear Algebra","keywords":"","body":"4.2 Linear Algebra "},"5 Algorithm/":{"url":"5 Algorithm/","title":"5 Algorithm","keywords":"","body":"5 Algorithm "}}